diff --git a/exlaunch/source/lib/hook/nx64/hook_impl.cpp b/exlaunch/source/lib/hook/nx64/hook_impl.cpp
index ed19ff5..e915f36 100644
--- a/exlaunch/source/lib/hook/nx64/hook_impl.cpp
+++ b/exlaunch/source/lib/hook/nx64/hook_impl.cpp
@@ -52,13 +52,17 @@ namespace exl::hook::nx64 {
 
     namespace {
 
-        // Hooking constants
+        // Local hooking constants
         constexpr size_t HookPoolSize = setting::JitSize;
         constexpr s64 MaxInstructions = 5;
         constexpr size_t TrampolineSize = MaxInstructions * 10;
-        constexpr u64 HookMax = HookPoolSize / (TrampolineSize * sizeof(uint32_t));
         constexpr u64 MaxReferences = MaxInstructions * 2;
         constexpr u32 Aarch64Nop = 0xd503201f;
+    }
+
+    constexpr u64 HookMax = HookPoolSize / (TrampolineSize * sizeof(uint32_t)); // HACK: keep visible to program
+
+    namespace {
 
         typedef uint32_t HookPool[HookMax][TrampolineSize];
         static_assert(sizeof(HookPool) <= HookPoolSize, "");
@@ -514,6 +518,7 @@ namespace exl::hook::nx64 {
     //-------------------------------------------------------------------------
 
     JIT_CREATE(s_HookJit, setting::JitSize);
+    volatile s32 s_HookEntryIndex = -1;
 
     void Initialize() {
        s_HookJit.Initialize();
@@ -524,9 +529,8 @@ namespace exl::hook::nx64 {
 
     static Result AllocForTrampoline(uint32_t** rx, uint32_t** rw) {
         static_assert((TrampolineSize * sizeof(uint32_t)) % 8 == 0, "8-byte align");
-        static volatile s32 index = -1;
 
-        uint32_t i = __atomic_increase(&index);
+        uint32_t i = __atomic_increase(&s_HookEntryIndex);
         
         if(i > HookMax)
             return result::HookTrampolineAllocFail;
@@ -609,4 +613,4 @@ namespace exl::hook::nx64 {
         return reinterpret_cast<uintptr_t>(rxtrampoline);
     }
 
-};
\ No newline at end of file
+};
diff --git a/exlaunch/source/lib/hook/nx64/inline_impl.cpp b/exlaunch/source/lib/hook/nx64/inline_impl.cpp
index 65ae384..edf97d9 100644
--- a/exlaunch/source/lib/hook/nx64/inline_impl.cpp
+++ b/exlaunch/source/lib/hook/nx64/inline_impl.cpp
@@ -21,10 +21,10 @@ namespace exl::hook::nx64 {
         uintptr_t m_Callback;
     };
 
-    static constexpr size_t InlinePoolCount = setting::InlinePoolSize / sizeof(Entry);
+    constexpr size_t InlinePoolCount = setting::InlinePoolSize / sizeof(Entry);
 
     JIT_CREATE(s_InlineHookJit, setting::InlinePoolSize);
-    static size_t s_EntryIndex = 0;
+    size_t s_InlineEntryIndex = 0;
 
     extern "C" {
         extern char exl_inline_hook_impl;
@@ -53,13 +53,13 @@ namespace exl::hook::nx64 {
 
     void HookInline(uintptr_t hook, uintptr_t callback, bool capture_floats) {
         /* Ensure enough space in the pool. */
-        if(s_EntryIndex >= InlinePoolCount)
+        if(s_InlineEntryIndex >= InlinePoolCount)
             R_ABORT_UNLESS(result::HookTrampolineAllocFail);
 
         /* Grab entry from pool. */
-        auto entryRx = &GetEntryRx()[s_EntryIndex];
-        auto entryRw = &GetEntryRw()[s_EntryIndex];
-        s_EntryIndex++;
+        auto entryRx = &GetEntryRx()[s_InlineEntryIndex];
+        auto entryRw = &GetEntryRw()[s_InlineEntryIndex];
+        s_InlineEntryIndex++;
 
         /* Get pointer to entry's entrypoint. */
         uintptr_t entryCb = reinterpret_cast<uintptr_t>(&entryRx->m_CbEntry);
@@ -93,4 +93,4 @@ namespace exl::hook::nx64 {
         /* Finally, flush caches to have RX region to be consistent. */
         s_InlineHookJit.Flush();
     }
-}
\ No newline at end of file
+}
diff --git a/exlaunch/source/lib/hook/nx64/inline_impl.hpp b/exlaunch/source/lib/hook/nx64/inline_impl.hpp
index 7080efa..ed3a44b 100644
--- a/exlaunch/source/lib/hook/nx64/inline_impl.hpp
+++ b/exlaunch/source/lib/hook/nx64/inline_impl.hpp
@@ -151,5 +151,11 @@ namespace exl::hook::nx64 {
         }
     };
 
+    // Allow program to view hook limits
+    extern const u64 HookMax;
+    extern volatile s32 s_HookEntryIndex;
+    extern const size_t InlinePoolCount;
+    extern size_t s_InlineEntryIndex;
+
     void InitializeInline();
-}
\ No newline at end of file
+}
