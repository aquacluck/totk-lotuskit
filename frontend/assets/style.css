@font-face {
    font-family: "Source Code Pro";
    src: url(fonts/SourceCodePro-ExtraLight.otf.woff2) format("woff2");
    font-weight: 200;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: "Source Code Pro";
    src: url(fonts/SourceCodePro-Medium.otf.woff2) format("woff2");
    font-weight: 500;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: "Source Code Pro";
    src: url(fonts/SourceCodePro-Black.otf.woff2) format("woff2");
    font-weight: 900;
    font-style: normal;
    font-display: swap;
}

body { margin: 0; }

/* Attempt to make white less harsh on OLED etc -- sadly windows firefox does not support HDR in 2025 ðŸ¤¡
 * Even the recent nvidia shit is postprocessing which does not trigger this query. Works in chrome tho */
@media (dynamic-range: standard) { :root { --color-text: #eee; } }
@media (dynamic-range: high)     { :root { --color-text: #ccc; } }

body, input, button, select, textarea, dialog, .fakebutton {
    background-color: #000;
    color: var(--color-text);
    font-family: "Source Code Pro", monospace;
    font-weight: 500;
    font-size: 1rem;
}

input, button, select, textarea, dialog, .fakebutton {
             border: 2px solid;
             border-color: #666 #222 #222 #666;
  &:hover  { border-color: #666 #333 #333 #666; }
  &:active { border-color: #222 #666 #666 #222; }
}

.pushbutton {
    /* square-ish button suited for dense clusters */
    font-family: inherit;
    height: 38px;
    min-width: 32px;
    /*max-width: 72px;*/
    padding: 0px 1px;

    &.pushbutton_null {
        /* invisible spacer, used with `inert` to remove all interaction */
        opacity: 0;
        pointer-events: none;
    }
}

.faketoggle {
    input[type=checkbox] { display: none; }
}

.fakebutton {
    user-select: none;
}

button.cta_blue  { background-color: #115588; } /* evoke "script" or "blueprint" */
button.cta_green { background-color: #117711; } /* evoke "overwhelmingly default/important", use sparingly */

textarea {
    width: 100%;
    min-height: 60px;
    height: 100%;
    display: block;
    scrollbar-color: var(--color-text) rgba(0,0,0,0);
    /* scrollbar-width: thin; /* better for chrome, worse for firefox */
}

.size_small .size_small_hidden { display: none; }

.copy_fake_target:has(+ .copy:active) {
    /* "fake" because we dont literally copy anything from this element, its just the logical source to hint */
    color: #fff;
    border: 1px #888;
    border-style: dashed none dashed;
    background: #222;
}

:root {
    --hue-recall: 48.6; /* yellow */
    --hue-motion: 228.6; /* blue */
    --hue-delete: 0; /* red */
    --hue-physical: 120; /* green */

    --vec-red:   hsl(  0 40% 80%);
    --vec-green: hsl(120 40% 80%);
    --vec-blue:  hsl(240 40% 80%);
}
.readout_vec2, .readout_vec3, .readout_quat {
    font-size: 0.85rem;
    &::before { content: attr(label) ": "; }

    /* let vec_components_* classes arbitrarily configure colors from palette */
    :nth-child(1) { color: var(--vec-tint-0); }
    :nth-child(2) { color: var(--vec-tint-1); }
    :nth-child(3) { color: var(--vec-tint-2); }
}
.vec_components_XYZ {
    --vec-tint-0: var(--vec-red);
    --vec-tint-1: var(--vec-green);
    --vec-tint-2: var(--vec-blue);
}
.vec_components_XZY {
    --vec-tint-0: var(--vec-red);
    --vec-tint-1: var(--vec-blue);
    --vec-tint-2: var(--vec-green);
}
.vec_components_ZX {
    --vec-tint-0: var(--vec-blue);
    --vec-tint-1: var(--vec-red);
}
.vec_components_ZXY {
    --vec-tint-0: var(--vec-blue);
    --vec-tint-1: var(--vec-red);
    --vec-tint-2: var(--vec-green);
}

.compass_spinny {
    display: inline-block;
    direction: ltr; /* supposedly rtl causes rotations to mirror? */
    width: 24px;
    transform-origin: 30px 15px;
    text-decoration: underline;
    font-size: 0.85rem;
    margin-left: 8px;
    :nth-child(1) { color: var(--vec-tint-0); }
    :nth-child(2) { color: var(--vec-tint-1); }
}

.execscript .as_source {
    min-height: 150px;
}

.fuzzysort_results_item {
    color: #ccc;
    label { color: #666; }
    b { color: var(--vec-green); }
}




/* toolsets use css grid to render clusters of ui into standalone layers which are absolutely positioned as needed. */

.toolbox_main { position: relative; }
.toolbox_main > .toolset_quickcorner { right:0px; bottom:0px; }
.toolbox_main > .toolset_rightbar { right:18px; top:0px; }

/* https://drafts.csswg.org/css-values-5/#tree-counting */
/*.toolbox_main > .toolset_actor_watcher { left: 0px; top: calc(sibling-index() * 400px); } */
.toolbox_main > .toolset_actor_watcher:nth-of-type(1) { left: 0px; top:   0px; }
.toolbox_main > .toolset_actor_watcher:nth-of-type(2) { left: 0px; top: 400px; }
.toolbox_main > .toolset_actor_watcher:nth-of-type(3) { left: 0px; top: 800px; }
.toolbox_main > .toolset_actor_watcher:nth-of-type(4) { left: 0px; top:1200px; }


.toolset_rightbar {
    position: absolute;
    height: 460px; /* FIXME trash layout -- visually holds the group before execscript and everything after just spills out */
    padding: 8px;
    background: #000;
    border: 1px solid #444;

    display: inline-grid;
    grid-template-rows: 1fr 1fr 1fr 1fr 1fr;
    grid-template-columns: 1fr 1fr;
    grid-template-areas:
    'pausehacks pausehacks'
    'camerahacks camerahacks'
    'hexdump hexdump'
    'memsearch quickdumps'
    'execscript execscript'
    'execscript execscript';
}
.toolset_rightbar > .camerahacks { grid-area: camerahacks; }
.toolset_rightbar > .pausehacks { grid-area: pausehacks; }
.toolset_rightbar > .hexdump { grid-area: hexdump; }
.toolset_rightbar > .memsearch { grid-area: memsearch; }
.toolset_rightbar > .execscript { grid-area: execscript; }
.toolset_rightbar > .execscript {
    /* XXX distinct region but we dont really know the height */
    margin-top: 20px;
    background: #000;
    height: 300px;
}


.toolset_quickcorner {
    position: fixed;
    padding: 8px;
    /*border: 1px solid #444;*/

    display: inline-grid;
    grid-template-rows: 1fr;
    grid-template-columns: 1fr;
    grid-template-areas: 'qc';
    /*'angelscript_notebook' 'ws';*/
}
.toolset_quickcorner > .qc { grid-area: qc; }
/*.toolset_quickcorner > .angelscript_notebook { grid-area: angelscript_notebook; }*/
/*.toolset_quickcorner > .ws { grid-area: ws; }*/
dialog {
    position: fixed;
    top: 0px;
    left: 0px;
    filter: drop-shadow(0px 10px 10px #115588);

    &> .esc {
        position: absolute;
        top: 0px;
        right: 0px;
        color: hsl(var(--hue-delete) 55% 80%);
        &:before { content: "[x]"; }
        &:active:before { content: "esc"; }
        &:hover { background: hsl(var(--hue-delete) 55% 30%); }
    }

    &> .move {
        position: absolute;
        top: 0px;
        right: 35px;
        cursor: grab;
        &:before { content: "[move]"; }
        &:active { cursor: grabbing; }
        &:active:before { content: "[drag]"; }
    }

    &> .content {
        min-width: 200px;
        min-height: 100px;
        width: 600px;
        height: 400px;
        resize: both;
        overflow: scroll;
        margin-top: 6px;
        scrollbar-color: var(--color-text) rgba(0,0,0,0);
        /* scrollbar-width: thin; /* better for chrome, worse for firefox */
    }
}

.toolset_actor_watcher {
    position: absolute;
    width: 60%;
    height: 330px;
    padding: 8px;
    border: 1px solid #444;

    display: inline-grid;
    /*grid-temp late: subgrid repeat(10,1fr) / subgrid repeat(3,1fr);*/
    grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-areas:
    'actor_selector_current actor_selector_options actor_selector_options'
    'actor_pos32            actor_pos32              .'
    'actor_pos32_ui         actor_pos32_ui           .'
    'actor_vel_frame        actor_vel_frame          .'
    'actor_pos64            actor_pos64              .'
    'actor_pos64_ui         actor_pos64_ui           .'
    'actor_compass          actor_compass            .'
    'bumper_pushbuttons     savestate_slot_actions   .'
    '.                      .                        .'
    '.                      .                        .'; /* empty rows get thrown out */

}
.toolset_actor_watcher > .actor_selector_current { grid-area: actor_selector_current; }
.toolset_actor_watcher > .actor_selector_options { grid-area: actor_selector_options; }
.toolset_actor_watcher > .actor_pos32 { grid-area: actor_pos32; }
.toolset_actor_watcher > .actor_pos32_ui { grid-area: actor_pos32_ui; }
.toolset_actor_watcher > .actor_pos64 { grid-area: actor_pos64; }
.toolset_actor_watcher > .actor_pos64_ui { grid-area: actor_pos64_ui; }
.toolset_actor_watcher > .actor_vel_frame { grid-area: actor_vel_frame; }
.toolset_actor_watcher > .actor_compass { grid-area: actor_compass; margin-bottom: 12px; }
.toolset_actor_watcher > .savestate_slot_actions { grid-area: savestate_slot_actions; }
.toolset_actor_watcher > .bumper_pushbuttons { grid-area: bumper_pushbuttons; }

.toolset_actor_watcher .actor_selector_options .selectRecall {
    img {
        /* TODO extract for any image-backed pushbutton? */
        height: 100%;
        width: 100%;
        position: relative;
        top: -6px;
        margin-bottom: -18px;
    }
}

.toolset_actor_watcher .actor_selector_options .selectNull {
    &:hover { background: hsl(var(--hue-delete) 55% 30%); }
}

.toolset_actor_watcher .actor_toggles {
    margin-top: 8px;
    margin-bottom: 4px;
    .fakebutton { padding: 4px; }
    .row2 { margin-top: 12px; margin-bottom: 8px; }
}

.toolset_actor_watcher .faketoggle.doWSLog :not(:checked) ~ .fakebutton {
    color: #222;
    border-color: #222 #222 #222 #222;
    &:hover { color: inherit; }
}
.toolset_actor_watcher .faketoggle.doWSLog :checked ~ .fakebutton {
    color: inherit;
    border-color: #222 #666 #666 #222;
}

.toolset_actor_watcher .faketoggle.doTextWriter :not(:checked) ~ .fakebutton {
    color: #222;
    border-color: #222 #222 #222 #222;
    &:hover { color: inherit; }
}
.toolset_actor_watcher .faketoggle.doTextWriter :checked ~ .fakebutton {
    color: inherit;
    border-color: #222 #666 #666 #222;
}

.toolset_actor_watcher .faketoggle.doDrawPos :not(:checked) ~ .fakebutton {
    color: hsl(var(--hue-recall) 15% 70%);
    &:hover {
        border-radius: 100%;
        color: hsl(var(--hue-recall) 45% 70%);
        border-color: hsl(var(--hue-recall) 30% 30%);
    }
}
.toolset_actor_watcher .faketoggle.doDrawPos :checked ~ .fakebutton {
    background: hsl(var(--hue-recall) 45% 30%);
    border-color: #222 #666 #666 #222;
    border-radius: 100%;
}

.toolset_actor_watcher .faketoggle.doDrawAABB :not(:checked) ~ .fakebutton {
    color: hsl(var(--hue-recall) 15% 70%);
    &:hover {
        color: hsl(var(--hue-recall) 45% 70%);
        border-color: hsl(var(--hue-recall) 30% 30%);
    }
}
.toolset_actor_watcher .faketoggle.doDrawAABB :checked ~ .fakebutton {
    border-color: hsl(var(--hue-recall) 45% 30%);
}

.toolset_actor_watcher .faketoggle.doDrawVel :not(:checked) ~ .fakebutton {
    color: hsl(var(--hue-motion) 15% 70%);
    &:hover {
        color: hsl(var(--hue-motion) 45% 70%);
        border-color: hsl(var(--hue-motion) 30% 30%);
    }
}
.toolset_actor_watcher .faketoggle.doDrawVel :checked ~ .fakebutton {
    background: hsl(var(--hue-motion) 45% 30%);
    border-color: #222 #666 #666 #222;
}
.toolset_actor_watcher .faketoggle.doDrawAngVel :not(:checked) ~ .fakebutton {
    color: hsl(var(--hue-motion) 15% 70%);
    &:hover {
        border-radius: 100%;
        color: hsl(var(--hue-motion) 45% 70%);
        border-color: hsl(var(--hue-motion) 30% 30%);
    }
}
.toolset_actor_watcher .faketoggle.doDrawAngVel :checked ~ .fakebutton {
    background: hsl(var(--hue-motion) 45% 30%);
    border-color: #222 #666 #666 #222;
    border-radius: 100%;
}

.toolset_actor_watcher .faketoggle.doDrawModelPos :not(:checked) ~ .fakebutton {
    color: hsl(0 0 70%);
    &:hover {
        border-radius: 100%;
        color: hsl(0 0 70%);
        border-color: hsl(0 0 30%);
    }
}
.toolset_actor_watcher .faketoggle.doDrawModelPos :checked ~ .fakebutton {
    background: hsl(0 0 30%);
    border-color: #222 #666 #666 #222;
    border-radius: 100%;
}

.toolset_actor_watcher .faketoggle.doWSRigidBody :not(:checked) ~ .fakebutton {
    color: hsl(var(--hue-physical) 15% 70%);
    &:hover {
        color: hsl(var(--hue-physical) 45% 70%);
    }
}
.toolset_actor_watcher .faketoggle.doWSRigidBody :checked ~ .fakebutton {
    background: hsl(var(--hue-physical) 45% 30%);
    border-color: #222 #666 #666 #222;
}

.toolset_actor_watcher .faketoggle.doTextWriterRigidBody :not(:checked) ~ .fakebutton {
    color: hsl(var(--hue-physical) 15% 70%);
    &:hover {
        color: hsl(var(--hue-physical) 45% 70%);
    }
}
.toolset_actor_watcher .faketoggle.doTextWriterRigidBody :checked ~ .fakebutton {
    background: hsl(var(--hue-physical) 45% 30%);
    border-color: #222 #666 #666 #222;
}

.toolset_actor_watcher .faketoggle.doDrawRigidBodyPos       :not(:checked) ~ .fakebutton,
.toolset_actor_watcher .faketoggle.doDrawRigidBodyPosPast   :not(:checked) ~ .fakebutton,
.toolset_actor_watcher .faketoggle.doDrawRigidBodyPosFuture :not(:checked) ~ .fakebutton {
    color: hsl(var(--hue-physical) 15% 70%);
    &:hover {
        border-radius: 100%;
        color: hsl(var(--hue-physical) 45% 70%);
        border-color: hsl(var(--hue-physical) 30% 30%);
    }
}
.toolset_actor_watcher .faketoggle.doDrawRigidBodyPos       :checked ~ .fakebutton,
.toolset_actor_watcher .faketoggle.doDrawRigidBodyPosPast   :checked ~ .fakebutton,
.toolset_actor_watcher .faketoggle.doDrawRigidBodyPosFuture :checked ~ .fakebutton {
    background: hsl(var(--hue-physical) 45% 30%);
    border-color: #222 #666 #666 #222;
    border-radius: 100%;
}

.toolset_actor_watcher .faketoggle.doDrawRigidBodyAABB :not(:checked) ~ .fakebutton {
    color: hsl(var(--hue-physical) 15% 70%);
    &:hover {
        color: hsl(var(--hue-physical) 45% 70%);
        border-color: hsl(var(--hue-physical) 30% 30%);
    }
}
.toolset_actor_watcher .faketoggle.doDrawRigidBodyAABB :checked ~ .fakebutton {
    border-color: hsl(var(--hue-physical) 45% 30%);
}


