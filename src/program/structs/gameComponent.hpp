#pragma once
#include <math/seadVector.h>
#include <math/seadMatrix.h>
#include "structs/exkingEnums.hpp"
#include "structs/bbBlackboard.hpp"
#include "structs/engineActor.hpp"
#include "structs/engineComponent.hpp"
#include "structs/engineTransceiver.hpp"
#include "structs/engineUtil.hpp"

namespace pp { class Document; }
namespace game::actor { class GameActor; } // TODO

namespace game::player { class ASCommandSet_STUB      { public: u8 idk[0xd0]; }; }
namespace game::player { class StaminaCalculator_STUB { public: u8 idk[0x80]; }; }
namespace engine::util { class Callback_STUB          { public: u8 idk[0x38]; }; }
namespace sead         { class IFunction_STUB         { public: void* vtbl; void* mpParent; void* func; u64 virtual_flags; }; }

using undefined  = u8;
using undefined4 = u32;
using undefined8 = u64;


namespace game::component {

    class EventPerformerCallbacks {
        public:
        sead::IFunction_STUB idk1;
        sead::IFunction_STUB idk2;
        sead::IFunction_STUB idk3;
        sead::IFunction_STUB idk4;
        sead::IFunction_STUB idk5;
        sead::IFunction_STUB idk6;
        sead::IFunction_STUB mEventEndCallback;
        sead::IFunction_STUB idk8;
        void* mpPrev; void* mpNext; // ListNode
    };
    static_assert(offsetof(EventPerformerCallbacks, mEventEndCallback) == 0xc0);

    class GameComponentBase: public ::engine::component::Component {
        public:
        virtual ~GameComponentBase(); // vtable i guess (base class should already have it, idk if needed)
        pp::Document* mpDocument;
        game::actor::GameActor* mpActor;
    };
    static_assert(offsetof(GameComponentBase, mpActor) == 0x18);

    class PlayerComponent: public GameComponentBase {
        public:
        u64 mSubActionStatus;
        u64 idk2;
        bb::State<u64> mPlayerVirtualKey;
        bb::State<u64> mPlayerVirtualKeyHold;
        bb::State<u64> mPlayerVirtualKeyRelease;
        bb::State<float> mPreRawLeftStickRadian;
        bb::State<float> mRawLeftStickRadian;
        bb::State<float> mLeftStickRadianCameraStandard;
        bb::State<float> mPlayerLeftStickLength;
        bb::State<float> mPlayerPreLeftStickLength;
        bb::State<float> mRollInputRadian;
        bb::State<float> mRawRightStickRadian;
        bb::State<float> mPlayerRightStickLength;
        bb::State<bool> mReverseInput;
        bb::State<bool> mRollInput;
        bb::State<sead::Vector3f> mRawLeftStick;
        bb::State<sead::Vector3f> mRawRightStick;
        undefined8 field18_0x120;
        engine::actor::BaseProcLink field19_0x128;
        undefined8 field20_0x140;
        undefined8 field21_0x148;
        undefined8 field22_0x150;
        undefined8 field23_0x158;
        game::player::ASCommandSet_STUB mASCommandSets[5];
        s32 field25_0x570[4];
        undefined8 field26_0x580;
        undefined8 field27_0x588;
        undefined8 field28_0x590;
        undefined8 field29_0x598;
        undefined8 field30_0x5a0;
        game::ui::SimpleInfoType mSimpleInfoTypes[33];
        undefined field32_0x62c;
        undefined field33_0x62d;
        undefined field34_0x62e;
        undefined field35_0x62f;
        engine::actor::BaseProcLink field36_0x630;
        engine::actor::BaseProcLink field37_0x648;
        engine::actor::BaseProcLink field38_0x660;
        undefined8 field39_0x678;
        undefined field40_0x680;
        undefined field41_0x681;
        undefined field42_0x682;
        undefined field43_0x683;
        sead::Vector2f field44_0x684;
        undefined field45_0x68c;
        undefined field46_0x68d;
        undefined field47_0x68e;
        undefined field48_0x68f;
        undefined8 field49_0x690;
        undefined8 field50_0x698;
        undefined8 field51_0x6a0;
        undefined8 field52_0x6a8;
        undefined8 field53_0x6b0;
        engine::actor::BaseProcLink mParasailLink;
        engine::actor::BaseProcLink mRevivalFairyLink;
        undefined8 field56_0x6e8;
        undefined8 field57_0x6f0;
        undefined8 field58_0x6f8;
        undefined8 field59_0x700;
        undefined8 field60_0x708;
        undefined8 field61_0x710;
        u32 field62_0x718;
        undefined field63_0x71c;
        undefined field64_0x71d;
        undefined field65_0x71e;
        undefined field66_0x71f;
        undefined8 field67_0x720;
        undefined8 field68_0x728;
        undefined8 field69_0x730;
        undefined8 field70_0x738;
        undefined8 field71_0x740;
        undefined8 field72_0x748;
        undefined8 field73_0x750;
        undefined8 field74_0x758;
        undefined8 field75_0x760;
        undefined8 field76_0x768;
        undefined8 mPlayerBroadcaster;
        engine::transceiver::TransceiverBase *field78_0x778;
        undefined8 field79_0x780;
        engine::actor::BaseProcLink field80_0x788;
        undefined8 field81_0x7a0;
        undefined8 field82_0x7a8;
        undefined8 field83_0x7b0;
        undefined8 field84_0x7b8;
        engine::actor::BaseProcLink field85_0x7c0;
        game::component::EventPerformerCallbacks field86_0x7d8;
        engine::util::Callback_STUB field87_0x8e8;
        engine::util::Callback_STUB field88_0x920;
        engine::util::Callback_STUB mEventLoadResourceStage2Callback;
        engine::util::Callback_STUB field90_0x990;
        engine::util::Callback_STUB field91_0x9c8;
        engine::util::Callback_STUB field92_0xa00;
        engine::util::Callback_STUB field93_0xa38;
        engine::util::Callback_STUB field94_0xa70;
        undefined8 field95_0xaa8;
        undefined8 field96_0xab0;
        undefined8 field97_0xab8;
        engine::actor::BaseProcLink field98_0xac0;
        u32 field99_0xad8;
        u32 field100_0xadc;
        u32 field101_0xae0;
        u32 field102_0xae4;
        u32 field103_0xae8;
        u32 field104_0xaec;
        u32 field105_0xaf0;
        u32 field106_0xaf4; // for simple info stuff
        u32 field107_0xaf8;
        u32 field108_0xafc;
        u32 field109_0xb00; // 0x1e = SurfLandDamage
        u32 field110_0xb04;
        float field111_0xb08;
        undefined field112_0xb0c;
        undefined field113_0xb0d;
        undefined field114_0xb0e;
        undefined field115_0xb0f;
        undefined8 field116_0xb10;
        undefined8 field117_0xb18;
        undefined8 field118_0xb20;
        sead::Vector3f mLastLinearVelocity;
        s32 mTgtBodyShapeIndex;
        u8 mHasTgtBodyShape;
        undefined field122_0xb39;
        undefined field123_0xb3a;
        undefined field124_0xb3b;
        s32 field125_0xb3c;
        u8 field126_0xb40;
        undefined field127_0xb41;
        undefined field128_0xb42;
        undefined field129_0xb43;
        undefined field130_0xb44;
        undefined field131_0xb45;
        undefined field132_0xb46;
        undefined field133_0xb47;
        u32 mSubLayer;
        undefined field135_0xb4c;
        undefined field136_0xb4d;
        undefined field137_0xb4e;
        undefined field138_0xb4f;
        undefined8 field139_0xb50;
        undefined8 field140_0xb58;
        u32 field141_0xb60;
        s32 mSlotPartialIndices[7];
        undefined field143_0xb80;
        undefined field144_0xb81;
        undefined field145_0xb82;
        undefined field146_0xb83;
        sead::Matrix34f field147_0xb84;
        undefined4 field148_0xbb4;
        undefined4 field149_0xbb8;
        float mForceFadeFrame;
        undefined8 field151_0xbc0;
        undefined8 field152_0xbc8;
        undefined8 field153_0xbd0;
        undefined field154_0xbd8;
        undefined field155_0xbd9;
        undefined field156_0xbda;
        undefined field157_0xbdb;
        u16 boner_mModelUnitIndex; u16 boner_mBoneIndex; //gsys::BoneAccessKey field158_0xbdc;
        undefined8 field159_0xbe0;
        undefined8 field160_0xbe8;
        s32 mBoolKeyIndices[64];
        s32 mFloatKeyIndices[68];
        s32 mIntKeyIndices[15];
        s32 mVec3fKeyIndices[1];
        s32 field165_0xe40;
        s32 field166_0xe44;
        undefined8 field167_0xe48;
        u32 field168_0xe50; // 0 = ground contact?
        undefined field169_0xe54;
        undefined field170_0xe55;
        undefined field171_0xe56;
        undefined field172_0xe57;
        undefined8 field173_0xe58;
        undefined8 field174_0xe60;
        undefined8 field175_0xe68;
        float field176_0xe70;
        float field177_0xe74;
        undefined8 field178_0xe78;
        undefined8 field179_0xe80;
        undefined8 field180_0xe88;
        undefined8 field181_0xe90;
        undefined8 field182_0xe98;
        undefined8 field183_0xea0;
        undefined8 field184_0xea8;
        undefined8 field185_0xeb0;
        undefined8 field186_0xeb8;
        undefined8 field187_0xec0;
        undefined8 field188_0xec8;
        undefined8 field189_0xed0;
        undefined8 field190_0xed8;
        undefined8 field191_0xee0;
        undefined8 field192_0xee8;
        undefined8 field193_0xef0;
        undefined8 field194_0xef8;
        undefined8 field195_0xf00;
        undefined8 field196_0xf08;
        undefined8 field197_0xf10;
        undefined8 field198_0xf18;
        undefined8 field199_0xf20;
        undefined8 field200_0xf28;
        undefined8 field201_0xf30;
        undefined8 field202_0xf38;
        undefined8 field203_0xf40;
        float field204_0xf48;
        undefined field205_0xf4c;
        undefined field206_0xf4d;
        undefined field207_0xf4e;
        undefined field208_0xf4f;
        undefined8 field209_0xf50;
        undefined8 field210_0xf58;
        undefined8 field211_0xf60;
        undefined8 field212_0xf68;
        undefined8 field213_0xf70;
        undefined8 field214_0xf78;
        undefined8 field215_0xf80;
        undefined8 field216_0xf88;
        undefined8 field217_0xf90;
        undefined8 field218_0xf98;
        undefined8 field219_0xfa0;
        engine::util::VFRCounter mOneTouchBondUnkTimer1;
        engine::util::VFRCounter field221_0xfb4;
        engine::util::VFRCounter field222_0xfc0;
        undefined field223_0xfcc;
        undefined field224_0xfcd;
        undefined field225_0xfce;
        undefined field226_0xfcf;
        undefined8 field227_0xfd0;
        undefined8 field228_0xfd8;
        undefined8 field229_0xfe0;
        undefined8 field230_0xfe8;
        undefined8 field231_0xff0;
        undefined field232_0xff8;
        undefined field233_0xff9;
        undefined field234_0xffa;
        undefined field235_0xffb;
        engine::util::VFRCounter field236_0xffc;
        engine::util::VFRCounter field237_0x1008;
        undefined field238_0x1014;
        undefined field239_0x1015;
        undefined field240_0x1016;
        undefined field241_0x1017;
        undefined8 field242_0x1018;
        undefined8 field243_0x1020;
        undefined8 field244_0x1028;
        undefined8 field245_0x1030;
        undefined field246_0x1038;
        undefined field247_0x1039;
        undefined field248_0x103a;
        undefined field249_0x103b;
        engine::util::VFRCounter mCeilingClipperTerrorKeepTimer;
        undefined8 field251_0x1048;
        undefined field252_0x1050;
        undefined field253_0x1051;
        undefined field254_0x1052;
        undefined field255_0x1053;
        engine::util::VFRCounter mCheckSageSkillStateDelayTimer;
        undefined8 field257_0x1060;
        undefined field258_0x1068;
        undefined field259_0x1069;
        undefined field260_0x106a;
        undefined field261_0x106b;
        engine::util::VFRCounter mSpecialLowGravityTimer;
        engine::util::VFRCounter field263_0x1078;
        engine::util::VFRCounter mOneTouchBondUnkTimer0; // maybe a timer until the new item box appears
        engine::util::VFRCounter field265_0x1090;
        engine::util::VFRCounter field266_0x109c;
        engine::util::VFRCounter mWaterBarrierKeepTimer;
        engine::util::VFRCounter mWaterBarrierDelayTimer;
        engine::util::VFRCounter mWaterBarrierASDelayTimer;
        engine::util::VFRCounter field270_0x10cc;
        engine::util::VFRCounter mRidingDragonAutoHealTimer;
        undefined field272_0x10e4;
        undefined field273_0x10e5;
        undefined field274_0x10e6;
        undefined field275_0x10e7;
        undefined8 field276_0x10e8;
        float field277_0x10f0;
        float field278_0x10f4;
        float field279_0x10f8;
        float field280_0x10fc;
        undefined8 field281_0x1100;
        engine::util::VFRCounter field282_0x1108;
        undefined field283_0x1114;
        undefined field284_0x1115;
        undefined field285_0x1116;
        undefined field286_0x1117;
        undefined8 field287_0x1118;
        undefined8 field288_0x1120;
        undefined8 field289_0x1128;
        undefined8 field290_0x1130;
        undefined8 field291_0x1138;
        s32 field292_0x1140;
        s32 mChargeAttackLevel;
        s32 mAttackCombo;
        float field295_0x114c;
        undefined8 field296_0x1150;
        sead::Vector3f field297_0x1158;
        undefined field298_0x1164;
        undefined field299_0x1165;
        undefined field300_0x1166;
        undefined field301_0x1167;
        undefined8 field302_0x1168;
        undefined8 field303_0x1170;
        undefined8 field304_0x1178;
        s32 field305_0x1180;
        undefined field306_0x1184;
        undefined field307_0x1185;
        undefined field308_0x1186;
        undefined field309_0x1187;
        u32 mChallengeFollwerType;
        s32 field311_0x118c;
        s32 field312_0x1190;
        s32 field313_0x1194;
        undefined8 field314_0x1198;
        undefined8 field315_0x11a0;
        undefined8 field316_0x11a8;
        s32 field317_0x11b0[2];
        u32 mDamageColorType; // 1 = normal, 2 = gloom
        engine::util::VFRCounter mDamageFlashCounter;
        engine::util::VFRCounter field320_0x11c8;
        engine::util::VFRCounter field321_0x11d4;
        s32 field322_0x11e0;
        s32 field323_0x11e4;
        sead::Vector3f mSavePos;
        bool field325_0x11f4;
        undefined field326_0x11f5;
        undefined field327_0x11f6;
        undefined field328_0x11f7;
        sead::Vector3f mLastSavePosMaybe;
        undefined4 field330_0x1204;
        float mSavePosRadY;
        float mLastSavePosRadYMaybe;
        u8 field333_0x1210;
        u8 field334_0x1211;
        undefined field335_0x1212;
        undefined field336_0x1213;
        sead::Vector3f field337_0x1214;
        sead::Vector3f field338_0x1220;
        undefined field339_0x122c;
        undefined field340_0x122d;
        undefined field341_0x122e;
        undefined field342_0x122f;
        undefined8 field343_0x1230;
        undefined field344_0x1238;
        undefined field345_0x1239;
        undefined field346_0x123a;
        undefined field347_0x123b;
        sead::Matrix34f field348_0x123c;
        float field349_0x126c;
        float field350_0x1270;
        float field351_0x1274;
        float field352_0x1278;
        float field353_0x127c;
        float field354_0x1280;
        float field355_0x1284;
        float field356_0x1288;
        float field357_0x128c;
        float field358_0x1290;
        float field359_0x1294;
        float field360_0x1298;
        undefined field361_0x129c;
        undefined field362_0x129d;
        undefined field363_0x129e;
        undefined field364_0x129f;
        undefined8 field365_0x12a0;
        undefined8 field366_0x12a8;
        undefined8 field367_0x12b0;
        undefined8 field368_0x12b8;
        undefined8 field369_0x12c0;
        undefined8 field370_0x12c8;
        undefined8 field371_0x12d0;
        undefined8 field372_0x12d8;
        undefined8 field373_0x12e0;
        undefined8 field374_0x12e8;
        undefined8 field375_0x12f0;
        undefined8 field376_0x12f8;
        undefined8 field377_0x1300;
        s32 field378_0x1308;
        game::actor::SpStepRateType mRequestedSpStepRateType;
        float mSpStepRateDuration;
        bool mIsSpStepRateActive;
        u8 field382_0x1315;
        undefined field383_0x1316;
        undefined field384_0x1317;
        game::actor::SpStepRateType mCurrentSpStepRateType;
        engine::util::VFRCounter mSpStepRateTimer;
        u32 field387_0x1328;
        undefined field388_0x132c;
        undefined field389_0x132d;
        undefined field390_0x132e;
        undefined field391_0x132f;
        undefined8 field392_0x1330;
        undefined8 field393_0x1338;
        undefined8 field394_0x1340;
        undefined8 field395_0x1348;
        undefined8 field396_0x1350;
        undefined8 field397_0x1358;
        engine::util::VFRCounter field398_0x1360;
        undefined field399_0x136c;
        undefined field400_0x136d;
        undefined field401_0x136e;
        undefined field402_0x136f;
        undefined8 field403_0x1370;
        engine::util::VFRCounter field404_0x1378;
        undefined field405_0x1384;
        undefined field406_0x1385;
        undefined field407_0x1386;
        undefined field408_0x1387;
        game::player::StaminaCalculator_STUB mStaminaCalculator;
        undefined8 field410_0x1408;
        undefined8 field411_0x1410;
        undefined8 field412_0x1418;
        undefined8 field413_0x1420;
        s32 field414_0x1428;
        s32 mHitStopType;
        s32 field416_0x1430;
        u32 mRumbleIntensity;
        s32 field418_0x1438;
        u8 field419_0x143c;
        undefined field420_0x143d;
        undefined field421_0x143e;
        undefined field422_0x143f;
        s32 mParasailGlideState;
        undefined field424_0x1444;
        undefined field425_0x1445;
        undefined field426_0x1446;
        undefined field427_0x1447;
        s32 field428_0x1448;
        u32 field429_0x144c;
        u16 field430_0x1450; // | 0x800 = riding dragon autoheal
        undefined field431_0x1452;
        undefined field432_0x1453;
        undefined field433_0x1454;
        undefined field434_0x1455;
        u8 mActionRequestFlags; // 4 = request parasail
        u8 field436_0x1457;
        u8 mSpActionStatus;
        undefined field438_0x1459;
        undefined field439_0x145a;
        undefined field440_0x145b;
        undefined field441_0x145c;
        undefined field442_0x145d;
        undefined field443_0x145e;
        undefined field444_0x145f;
    };
    static_assert(offsetof(PlayerComponent, mSubActionStatus) == 0x20);
    static_assert(offsetof(PlayerComponent, mSavePos) == 0x11e8);
    static_assert(offsetof(PlayerComponent, mSpActionStatus) == 0x1458);

} // ns

